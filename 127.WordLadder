class Pair{

    String s;
    int i;

    Pair(String s, int i){

        this.s=s;
        this.i=i;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Queue<Pair> q=new LinkedList<>();

        q.add(new Pair(beginWord, 1));

        Set<String> set=new HashSet<>();

        for(int i=0;i<wordList.size();i++){

            set.add(wordList.get(i));
        }

        while(!q.isEmpty()){

            String str=q.peek().s;
            int n=q.peek().i;
            q.poll();

            if(str.equals(endWord)==true){
                return n;
            }
            for(int i=0;i<str.length();i++){

                for(char c='a';c<='z';c++){

                    if(c==str.charAt(i))continue;

                    String newWord=str.substring(0, i)+c+str.substring(i+1);

                    if(set.contains(newWord)){
                        q.add(new Pair(newWord, n+1));
                        set.remove(newWord);
                    }
                }
            }
        }
        return 0;
    }
}