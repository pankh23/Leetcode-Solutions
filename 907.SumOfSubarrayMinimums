class Solution {
    public int sumSubarrayMins(int[] arr) {
        
        int total=0;
        int mod=1_000_000_007;

        int[] nse=nseFunc(arr);
        int[] pse=pseFunc(arr);

        for(int i=0;i<arr.length;i++){

            int left=i-pse[i];
            int right=nse[i]-i;
            long contri=((long) left*right%mod*arr[i])%mod;

            total=(int)((total+contri)%mod);
        }

        return total;
    }

    public int[] nseFunc(int[] arr){

        Stack<Integer> st=new Stack<>();
        int[] nse=new int[arr.length];

        for(int i=arr.length-1;i>=0;i--){

            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){

                st.pop();
            }

            if(st.isEmpty()){
                nse[i]=arr.length;
            }
            else{
                nse[i]=st.peek();
            }
            st.push(i);
        }
        return nse;
    }

    public int[] pseFunc(int[] arr){

        Stack<Integer> st=new Stack<>();
        int[] pse=new int[arr.length];
        
        for(int i=0;i<arr.length;i++){

            while(!st.isEmpty() && arr[st.peek()]>arr[i]){

                st.pop();
            }

            if(st.isEmpty()){
                pse[i]=-1;
            }
            else{
                pse[i]=st.peek();
            }
            st.push(i);
        }
        return pse;
    }
}