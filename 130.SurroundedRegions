class Solution {
    public void solve(char[][] board) {
        
        int m=board.length;
        int n=board[0].length;

        boolean[][] vis=new boolean[m][n];

        int[] row={-1, 0, 1, 0};
        int[] col={0, -1, 0, 1};

        for(int i=0;i<m;i++){

            if(board[i][0]=='O' && vis[i][0]==false){
                dfs(i, 0, board, vis, row, col);
            }
            if(board[i][n-1]=='O' && vis[i][n-1]==false){
                dfs(i, n-1, board, vis, row, col);
            }
        }

        for(int j=0;j<n;j++){

            if(board[0][j]=='O' && vis[0][j]==false){
                dfs(0, j, board, vis, row, col);
            }
            if(board[m-1][j]=='O' && vis[m-1][j]==false){
                dfs(m-1, j, board, vis, row, col);
            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){

                if(vis[i][j]==false && board[i][j]=='O'){
                    
                    board[i][j]='X';
                }
            }
        }
    }

    public void dfs(int r, int c, char[][] mat, boolean[][] vis, int[] row, int[] col){

        vis[r][c]=true;

        for(int i=0;i<4;i++){

            int nr=row[i]+r;
            int nc=col[i]+c;

            if(nr>=0 && nc>=0 && nr<mat.length && nc<mat[0].length && vis[nr][nc]==false && mat[nr][nc]=='O'){
                
                dfs(nr, nc, mat, vis, row, col);
            }
        }
    }
}