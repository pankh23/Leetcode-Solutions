class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        List<List<String>> list=new ArrayList<>();

        char[][] mat=new char[n][n];

        for(int i=0;i<n;i++){

            Arrays.fill(mat[i], '.');
        }

        helper(list, n, mat, 0);
        return list;
    }

    public void helper(List<List<String>> list, int n, char[][] mat, int row){

        if(row==n){

            List<String> ans=new ArrayList<>();

            for(char[] arr:mat){
                ans.add(new String(arr));
            }

            list.add(ans);
            return;
        }

        for(int col=0;col<n;col++){

            if(safe(n, mat, row, col)){

                mat[row][col]='Q';

                helper(list, n, mat, row+1);
                mat[row][col]='.';
            }
        }
    }

    public boolean safe(int n, char[][] mat, int row, int col){

        for(int i=0;i<n;i++){

            if(mat[i][col]=='Q'){
                return false;
            }
        }

        for(int i=row-1,j=col-1; i>=0 && j>=0; i--,j--){

            if(mat[i][j]=='Q'){
                return false;
            }
        }

        for(int i=row-1,j=col+1; i>=0 && j<n; i--,j++){

            if(mat[i][j]=='Q'){
                return false;
            }
        }

        return true;
    }
}