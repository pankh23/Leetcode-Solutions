/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode mid(ListNode head){

        if(head==null || head.next==null){

            return head;
        }

        ListNode slow=head, fast=head.next;

        while(fast!=null && fast.next!=null){

            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;

    }

    public ListNode merge(ListNode l1, ListNode l2){

        ListNode temp = new ListNode(0);
        ListNode curr=temp;

        while(l1!=null && l2!=null){

            if(l1.val<l2.val){

                curr.next=l1;
                l1=l1.next;
            }
            else{
                curr.next=l2;
                l2=l2.next;
            }

            curr=curr.next;
        }
        curr.next=(l1!=null) ? l1:l2;
        return temp.next;

    }
    public ListNode sortList(ListNode head) {
        
        if(head==null || head.next==null){
            return head; 
        }

        ListNode mid=mid(head);
        ListNode right=mid.next;
        mid.next=null;
        ListNode left=head;

        left=sortList(left);
        right=sortList(right);

        return merge(left, right);

    }
}