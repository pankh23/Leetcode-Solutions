class Pair {
    int first;
    long second;
    
    public Pair(int first, long second) {
        this.first = first;
        this.second = second;
    }
}
class Solution {

    public int countPaths(int n, int[][] roads) {
        
        ArrayList<ArrayList<Pair>> arr=new ArrayList<>();

        for(int i=0;i<n;i++){

            arr.add(new ArrayList<>());
        }

        for (int[] road : roads) {
            arr.get(road[0]).add(new Pair(road[1], road[2]));
            arr.get(road[1]).add(new Pair(road[0], road[2]));
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Long.compare(a.second, b.second));

        long[] times=new long[n];
        int[] ways=new int[n];

        Arrays.fill(times, Long.MAX_VALUE);
        Arrays.fill(ways, 0);
        times[0]=0;
        ways[0]=1;

        pq.add(new Pair(0, 0));
        int MOD=(int)(1e9+7);

        while(!pq.isEmpty()){

            Pair current = pq.poll();
            int node = current.first;
            long time = current.second;

            if (time > times[node]) continue;

            for(Pair p:arr.get(node)){
                int newAdj=p.first;
                long moreTime=p.second;

                if(time+moreTime<times[newAdj]){

                    times[newAdj]=time+moreTime;
                    ways[newAdj]=ways[node];
                    pq.add(new Pair(newAdj,times[newAdj]));
                }
                else if(time+moreTime==times[newAdj]){

                    ways[newAdj]=(ways[node]+ways[newAdj])%MOD;
                }
            }
        }
        return ways[n-1]%MOD;
    }
}