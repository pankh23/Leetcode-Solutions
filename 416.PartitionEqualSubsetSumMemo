class Solution {
    public boolean canPartition(int[] nums) {
        
        int totsum = 0;
        for (int num : nums) {
            totsum += num;
        }  
        
        if (totsum % 2 == 1)
            return false; 
        
        int k = totsum / 2;
        int n = nums.length;
        int[][] dp = new int[n][k + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        
        return f(n - 1, k, nums, dp) == 1;
    }
    

    public int f(int ind, int target, int[] nums, int[][] dp) {
        if (target == 0)
            return 1; 
        if (ind == 0)
            return nums[0] == target ? 1 : 0;  
        if (dp[ind][target] != -1)
            return dp[ind][target];
        
        boolean notpick = f(ind - 1, target, nums, dp) == 1;
        boolean pick = false;
        if (nums[ind] <= target)
            pick = f(ind - 1, target - nums[ind], nums, dp) == 1;
        
        dp[ind][target] = pick || notpick ? 1 : 0;
        return dp[ind][target];
    }
}