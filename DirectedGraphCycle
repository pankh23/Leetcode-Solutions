class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        // code here
        
        boolean[] vis=new boolean[V];
        
        boolean[] path=new boolean[V];
        
        List<List<Integer>> adj = new ArrayList<>();
        
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
        }
        
        for(int i=0;i<V;i++){
            
            if(!vis[i]){
                
                if(dfs(vis, path, adj, i)==true){
                    return true;
                }
            }
            
        }
        return false;
    }
    
    public static boolean dfs(boolean[] vis, boolean[] path, List<List<Integer>> adj, int node){
        
        vis[node]=true;
        path[node]=true;
        
        for(int i:adj.get(node)){
            
            if(!vis[i]){
                
                if(dfs(vis, path, adj, i)==true){
                    return true;
                }
            }
            else if(path[i]==true){
                return true;
            }
        }
        path[node]=false;
        
        return false;
    }
}