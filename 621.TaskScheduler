class Solution {
    public int leastInterval(char[] tasks, int n) {
        
        HashMap<Character, Integer> h=new HashMap<>();

        for(char c:tasks){

            h.put(c, h.getOrDefault(c, 0)+1);
        }

        PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());

        for(char ch:h.keySet()){

            int freq=h.get(ch);
            pq.offer(freq);
        }

        Queue<int[]> queue=new LinkedList<>();
        int time=0;

        while(!queue.isEmpty() || !pq.isEmpty()){

            time++;
            
            if(!pq.isEmpty()){

                int rem=pq.poll()-1;

                if(rem>0){

                    queue.offer(new int[]{rem, time+n});
                }
            }

            if(!queue.isEmpty() && queue.peek()[1]==time){

                pq.add(queue.poll()[0]);
            }
        }
        return time;
    }
}