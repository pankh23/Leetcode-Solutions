class Solution {
    public int coinChange(int[] coins, int amount) {
        
        int dp[][]=new int[coins.length][amount+1];

        for(int i[]:dp){
            Arrays.fill(i, -1);
        }

        int ans= helper(coins, amount, coins.length-1, dp);

        if(ans>=1e9){

            return -1;
        }

        return ans;
    }

    public static int helper(int[] coins, int amount, int ind, int dp[][]){

        if(ind==0){
            if(amount % coins[0]==0)
                return amount/coins[0];
            else
                return (int)1e9;
        }

        if(dp[ind][amount]!=-1){

            return dp[ind][amount];
        }

        int not=helper(coins, amount, ind-1, dp);
        int take=Integer.MAX_VALUE;

        if(coins[ind]<=amount){

            take=1+helper(coins, amount-coins[ind], ind, dp);
        }

        return dp[ind][amount] = Math.min(not, take);
    }
}