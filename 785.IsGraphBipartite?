class Solution {
    public boolean isBipartite(int[][] graph) {
        
        int[] color=new int[graph.length];

        for(int i=0;i<color.length;i++){
            color[i]=-1;
        }
        for(int i=0;i<graph.length;i++){

            if(color[i]==-1){
                if(helper(i, color, graph)==false){

                    return false;
                }
            }
        }
        return true;
    }

    public boolean helper(int start, int[] color, int[][] graph){

        Queue<Integer> q=new LinkedList<>();
        q.add(start);
        color[0]=0;

        while(!q.isEmpty()){

            int k=q.poll();

            for(int i:graph[k]){

                if(color[i]==-1){
                    color[i]=1-color[k];
                    q.add(i);
                }
                else if(color[i]==color[k]){
                    return false;
                }
            }
        }
        return true;
    }
}