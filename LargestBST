// class Node
// {
//     int data;
//     Node left, right;

//     public Node(int d)
//     {
//         data = d;
//         left = right = null;
//     }
// }

class Solution {

    // Return the size of the largest sub-tree which is also a BST
    static int largestBst(Node root) {
        // Write your code here
        
        if(root==null){
            return 0;
        }
        
        if(isBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE)){
            return helper(root);
        }
        
        return Math.max(largestBst(root.left), largestBst(root.right));
    }
    
    public static boolean isBst(Node root, int min, int max){
        
        if(root==null)return true;
        
        if (root.data <= min || root.data >= max) return false;
        
        return (isBst(root.left, min, root.data) && isBst(root.right, root.data, max));
    }
    
    public static int helper(Node root){
        
        if(root==null)return 0;
        
        return 1+helper(root.left)+helper(root.right);
    }
}