class Solution {

    int[][] dp=null;

    public int maxValue(int[][] events, int k) {
        
        dp=new int[events.length][k+1];

        for(int[] d:dp){
            Arrays.fill(d, -1);
        }
        int max=0;

        Arrays.sort(events, (a, b)->a[0]==b[0]?a[1]-b[1]:a[0]-b[0]);

        return helper(events, 0, k);
    }

    public int helper(int[][] events, int pos, int k){

        if(pos>=events.length || k==0){
            return 0;
        }

        if(dp[pos][k]>-1){
            return dp[pos][k];
        }
        int next=nextEvent(events, pos, events.length);
        int sel=events[pos][2]+helper(events, next, k-1);
        int rej=helper(events, pos+1, k);

        dp[pos][k]=Math.max(sel, rej);
        return dp[pos][k];
    }

    public int nextEvent(int[][] events, int pos, int n){

        int end=events[pos][1];
        pos++;

        while(pos<n){

            int mid=pos+(n-pos)/2;

            if(events[mid][0]>end){
                n=mid;
            }
            else{
                pos=mid+1;
            }
        }
        return n;
    }
}