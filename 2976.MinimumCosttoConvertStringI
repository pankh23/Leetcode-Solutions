class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {

        int n = source.length();
        if (n != target.length()) {
            return -1; 
        }

        int[][] dis = new int[26][26];
        for (int i = 0; i < 26; i++) {
            Arrays.fill(dis[i], Integer.MAX_VALUE / 2);
            dis[i][i] = 0;
        }

        for (int i = 0; i < original.length; i++) {
            int from = original[i] - 'a';
            int to = changed[i] - 'a';
            dis[from][to] = Math.min(dis[from][to], cost[i]);
        }

        for (int k = 0; k < 26; k++) {
            for (int i = 0; i < 26; i++) {
                for (int j = 0; j < 26; j++) {
                    if (dis[i][j] > dis[i][k] + dis[k][j]) {
                        dis[i][j] = dis[i][k] + dis[k][j];
                    }
                }
            }
        }

        long totalCost = 0;
        for (int i = 0; i < n; i++) {
            int c1 = source.charAt(i) - 'a';
            int c2 = target.charAt(i) - 'a';
            if (dis[c1][c2] == Integer.MAX_VALUE / 2) {
                return -1;
            } else {
                totalCost += dis[c1][c2];
            }
        }

        return totalCost;
        }
    }
