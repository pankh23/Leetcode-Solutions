class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        
        List<List<Integer>> list=new ArrayList<>();
        
        boolean[] vis=new boolean[graph.length];
        boolean[] path=new boolean[graph.length];
        int[] check=new int[graph.length];

        for(int i=0;i<graph.length;i++){

            List<Integer> adj=new ArrayList<>();

            for(int j=0;j<graph[i].length;j++){
                adj.add(graph[i][j]);
            }
            list.add(adj);
        }

        for(int i=0;i<graph.length;i++){

            if(!vis[i]){

                dfs(vis, list, i, path, check);
            }
        }

        List<Integer> safe=new ArrayList<>();

        for(int i=0;i<graph.length;i++){

            if(check[i]==1){
                safe.add(i);
            }
        }
        return safe;
    }

    public boolean dfs(boolean[] vis, List<List<Integer>> list, int node, boolean[] path, int[] check){

        check[node]=0;
        vis[node]=true;
        path[node]=true;

        for(int i:list.get(node)){

            if(!vis[i]){

                if(dfs(vis, list, i, path, check)==true){

                    return true;
                }
            }
            else if(path[i]){

                return true;
            }
        }

        check[node]=1;
        path[node]=false;

        return false;
    }
}