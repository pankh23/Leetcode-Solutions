class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int[][][][] dp = new int[n][n][n][n];
        
        for (int[][][] d1 : dp)
            for (int[][] d2 : d1)
                for (int[] d3 : d2)
                    Arrays.fill(d3, Integer.MIN_VALUE);

        int res = helper(0, 0, 0, 0, grid, dp);
        return Math.max(0, res); 
    }

    public int helper(int r1, int c1, int r2, int c2, int[][] mat, int[][][][] dp) {
        int n = mat.length;
        int c2_actual = c1 + r1 - r2;

        if (r1 >= n || c1 >= n || r2 >= n || c2 >= n || mat[r1][c1] == -1 || mat[r2][c2] == -1) {
            return Integer.MIN_VALUE;
        }

        if (r1 == n - 1 && c1 == n - 1) return mat[r1][c1];

        if (dp[r1][c1][r2][c2] != Integer.MIN_VALUE) return dp[r1][c1][r2][c2];

        int cherries = 0;
        if (r1 == r2 && c1 == c2) {
            cherries += mat[r1][c1];
        } else {
            cherries += mat[r1][c1] + mat[r2][c2];
        }

        int maxNext = Math.max(
            Math.max(helper(r1 + 1, c1, r2 + 1, c2, mat, dp), helper(r1, c1 + 1, r2, c2 + 1, mat, dp)),
            Math.max(helper(r1 + 1, c1, r2, c2 + 1, mat, dp), helper(r1, c1 + 1, r2 + 1, c2, mat, dp))
        );

        cherries += maxNext;
        dp[r1][c1][r2][c2] = cherries;
        return cherries;
    }
}
