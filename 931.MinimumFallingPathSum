class Solution {
    int dp[][]; 
    public int minFallingPathSum(int[][] matrix) {
        
        int m = matrix.length;
        int n = matrix[0].length;
        dp = new int[m][n];

        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        int minPathSum = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            minPathSum = Math.min(minPathSum, sum(matrix, 0, j));
        }

        return minPathSum;
    }

    public int sum(int[][] matrix, int i, int j){

        int m = matrix.length;
        int n = matrix[0].length;

        if (i >= m || j >= n || j < 0) {
            return Integer.MAX_VALUE;
        }

        if (dp[i][j] != Integer.MAX_VALUE) {
            return dp[i][j];
        }

        if (i == m - 1) {
            return matrix[i][j];
        }

        int down = sum(matrix, i + 1, j);
        int downLeft = sum(matrix, i + 1, j - 1);
        int downRight = sum(matrix, i + 1, j + 1);

        dp[i][j] = matrix[i][j] + Math.min(down, Math.min(downLeft, downRight));
        return dp[i][j];
    }
}