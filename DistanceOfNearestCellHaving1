class pair{
    
    int f;
    int s;
    int n;
    
    public pair(int f, int s, int n){
        
        this.f=f;
        this.s=s;
        this.n=n;
    }
}
class Solution {
    // Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid) {
        // Code here
        
        Queue<pair> q=new LinkedList<pair>();
        
        int[][] dist=new int[grid.length][grid[0].length];
        
        boolean[][] vis=new boolean[grid.length][grid[0].length];
        
        for(int i=0;i<grid.length;i++){
            
            for(int j=0;j<grid[0].length;j++){
                
                if(grid[i][j]==1){
                    
                    vis[i][j]=true;
                    q.add(new pair(i, j, 0));
                }
                else{
                    vis[i][j]=false;
                }
            }
        }
        
        int[] r={-1, 0, 1, 0};
        int[] c={0, 1, 0, -1};
            
        while(!q.isEmpty()){
            
            int row=q.peek().f;
            int col=q.peek().s;
            int num=q.peek().n;
            
            q.remove();
            dist[row][col]=num;
            
            for(int i=0;i<4;i++){
                
                if(row+r[i]<grid.length && row+r[i]>=0 && col+c[i]<grid[0].length && col+c[i]>=0 && vis[row+r[i]][col+c[i]]==false){
                    
                    vis[row+r[i]][col+c[i]]=true;
                    q.add(new pair(row+r[i], col+c[i], num+1));
                }
            }
        }
        return dist;
    }
}