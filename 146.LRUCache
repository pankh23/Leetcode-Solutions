class LRUCache {

    class Node{

        int key, value;
        Node prev, next;

        Node(int key, int value){
            this.key=key;
            this.value=value;
        }
    }

    int cap;
    Map<Integer, Node> map;
    Node head, tail;

    public LRUCache(int capacity) {
        
       this.cap=capacity;
       map=new HashMap<>();
       head=new Node(0, 0);
       tail=new Node(0, 0);
       head.next=tail;
       tail.prev=head;
    }
    
    public int get(int key) {
        
        if(!map.containsKey(key)){
            return -1;
        }
        Node newNode=map.get(key);
        delete(newNode);
        insert(newNode);

        return newNode.value;
    }
    
    public void put(int key, int value) {
        
        if(map.containsKey(key)){

            Node newNode=map.get(key);
            newNode.value=value;
            delete(newNode);
            insert(newNode);
        }
        else{

            if(map.size()==cap){

                map.remove(tail.prev.key);
                delete(tail.prev);
            }
            Node newNode=new Node(key, value);
            map.put(key, newNode);
            insert(newNode);
        }
    }
    public void delete(Node node){

        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    public void insert(Node node){

        node.next=head.next;
        node.prev=head;
        head.next.prev=node;
        head.next=node;
    }

}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */