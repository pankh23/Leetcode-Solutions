class Pair{

    int first;
    int sec;

    public Pair(int first, int sec){

        this.first=first;
        this.sec=sec;
        
    }
}
class Solution {
    public int numIslands(char[][] grid) {
        
        int count=0;
        int n=grid.length;
        int m=grid[0].length;
        int[][] visited=new int[n][m];

        for(int r=0;r<n;r++){

            for(int c=0;c<m;c++){

                if(visited[r][c]==0 && grid[r][c]=='1'){
                    count++;
                    bfs(r, c, visited, grid);
                }
            }
        }
        return count;
    }

    public void bfs(int r, int c, int[][] visited, char[][] grid){

        visited[r][c]=1;
        int n=grid.length;
        int m=grid[0].length;

        Queue<Pair> q=new LinkedList<Pair>(); 
        q.add(new Pair(r, c));
        
        int[] dRow = { -1, 1, 0, 0 }; 
        int[] dCol = { 0, 0, -1, 1 };
        while(!q.isEmpty()){

            int row = q.peek().first;
            int col = q.peek().sec;
            q.remove();

            for (int i = 0; i < 4; i++) { 
                int nRow = row + dRow[i];
                int nCol = col + dCol[i];

                    if(nRow>=0 && nCol>=0 && nRow<n && nCol<m && visited[nRow][nCol]==0 && grid[nRow][nCol]=='1'){

                        visited[nRow][nCol]=1;
                        q.add(new Pair(nRow, nCol));
                    }
                }
            }
        }
    }