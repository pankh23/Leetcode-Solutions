// User function Template for Java
class Pair{
    
    int first;
    int second;
    
    Pair(int first, int second){
        
        this.first=first;
        this.second=second;
    }
}
class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        
        for(int i=0;i<V;i++){
            
            ArrayList<Pair> arr=new ArrayList<>();
            adj.add(arr);
        }
        for(int i=0;i<E;i++){
            
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            adj.get(u).add(new Pair(v, wt));
        }
        
        Stack<Integer> st=new Stack<>();
        
        int[] ans=new int[V];
        
        boolean[] vis=new boolean[V];
        
        for(int i=0;i<V;i++){
            
            if(!vis[i]){
                
                topo(i, vis, V, adj, st);
            }
        }
        
        int[] dist=new int[V];
        
        for(int i=0;i<V;i++){
            
            dist[i]=(int)1e9;
        }
        
        dist[0]=0;
        
        while(!st.isEmpty()){
            
            int top=st.pop();
            
            for(int i=0;i<adj.get(top).size();i++){
                
                int v=adj.get(top).get(i).first;
                int wt=adj.get(top).get(i).second;
                
                if(dist[top]+wt<dist[v]){
                    
                    dist[v]=dist[top]+wt;
                }
            }
        }
        
        for (int i = 0; i < V; i++) {
            if (dist[i] == (int)1e9) dist[i] = -1;
        }
        
        return dist;
    }
    
    public static void topo(int node, boolean[] vis, int v, ArrayList<ArrayList<Pair>> adj, Stack<Integer> st){
        
        vis[node]=true;
        
        for(int i=0;i<adj.get(node).size();i++){
            
            int j=adj.get(node).get(i).first;
            
            if(!vis[j]){
                topo(j, vis, v, adj, st);
            }
        }
        st.add(node);
    }
}