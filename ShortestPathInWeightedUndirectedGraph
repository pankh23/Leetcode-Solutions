class pair{
    
    int node;
    int weight;
    
    pair(int node, int weight){
        
        this.node=node;
        this.weight=weight;
    }
}
class Solution {
    public List<Integer> shortestPath(int n, int m, int edges[][]) {
        //  Code Here.
        
        ArrayList<ArrayList<pair>> adj=new ArrayList<>();
        
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i[]:edges){
            
            int u=i[0];
            int v=i[1];
            int w=i[2];
            
            adj.get(u).add(new pair(v, w));
            adj.get(v).add(new pair(u, w));
        }
        
        List<Integer> ans=new ArrayList<>();
        
        PriorityQueue<pair> pq=new PriorityQueue<>((a, b)->a.weight-b.weight);
        
        pq.offer(new pair(1, 0));
        
        int dist[]=new int[n+1];
        int[] parent=new int[n+1];
        
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
            dist[i] = (int) 1e9;
        }
        
        dist[1]=0;
        
        while(!pq.isEmpty()){
            
            int ele=pq.peek().node;
            int w=pq.peek().weight;
            pq.poll();
            
            
            for(pair p:adj.get(ele)){
                
                int adjNode=p.node;
                int dis=p.weight;
                
                if(dis+w<dist[adjNode]){
                    
                    dist[adjNode]=dis+w;
                    parent[adjNode]=ele;
                    pq.offer(new pair(adjNode, dist[adjNode]));
                }
            }
        }
        
        if(dist[n]==1e9){
            return Arrays.asList(-1);
        }
        int curr=n;
        
        while(parent[curr]!=curr){
            
            ans.add(curr);
            curr=parent[curr];
        }
        ans.add(1);
        Collections.reverse(ans);
        
        List<Integer> result=new ArrayList<>();
        result.add(dist[n]);
        result.addAll(ans);
        return result;
    }
}